{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":""},{"location":"#llm-hands-on-workshop","title":"LLM Hands on Workshop","text":"<p>Welcome to the material for the LLM Hands on Workshop!</p> <p>This page is pretty simple, start with Setting up and then continue through the sections in order. We start with some basic API calls, then introduce Pydantic, LlamaIndex, and RAG.</p> <p>Or you can just pick a section that interests you.</p>"},{"location":"#sections","title":"Sections","text":""},{"location":"1_setting_up/","title":"Setting up","text":"<p>For this workshop, we will be using models from OpenAI. We understand that often in research, we want full control and ownership over our models. The models hosted by OpenAI are closed source, and therefore may be inappropriate for some use cases. However, there are some advantages to using OpenAI models:</p> <ol> <li>OpenAI arguably offer the best current models</li> <li>The documentation is excellent</li> <li>They use the OpenAI API spec.</li> </ol> <p>The final point is particularly important - we will show you how to set up a cloud instance on RunPod using vLLM. vLLM is a library that essentially wraps a hugging face model in an API spec that is compatible with OpenAI. So almost all of the skills you learn using OpenAI will be transferable to running your own models.</p> <p>If you want to use OpenAI, you will need to create an API key. For this workshop, we will provide you with one. However, if you want to use your own open source models, then you can also do that. During the workshop, wherever possible, we will try and highlight the differences between using OpenAI and your own models.</p>"},{"location":"1_setting_up/#setting-up-your-environment","title":"Setting up your environment","text":"<p>For this workshop, since we're not really doing any heavy lifting, we can work entirely within Github Codespaces. If you want, you can also use any other IDE you like, such as VSCode, or Jupyter Notebooks.</p> <p>My advice would be to create a new repository on Github, and then create a codespace from that repository. You can then copy and past the <code>requirements-handson.txt</code> file into the repository, and run</p> <pre><code>pip install -r requirements-handson.txt\n</code></pre>"},{"location":"1_setting_up/#setting-up-runpod-and-vllm","title":"Setting up RunPod and vLLM","text":"<p>For this demonstration we will run <code>llama-3.1-8b</code> on a Nvidia A40 GPU. If you want to do this, you will need to set up a RunPod account, add a payment method, and deposit some credit. For RunPod, you pay by the hour.</p>"},{"location":"2_open_ai/","title":"The OpenAI API","text":"In\u00a0[66]: Copied! <pre>from openai import OpenAI\nimport dotenv\nimport os\nfrom rich import print as rprint\n\ndotenv.load_dotenv()\n\nclient = OpenAI()\n\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n</pre> from openai import OpenAI import dotenv import os from rich import print as rprint  dotenv.load_dotenv()  client = OpenAI()  OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") <p>Calling a model is simple</p> In\u00a0[20]: Copied! <pre>system_prompt = \"You are Matsuo Basho, the great Japanese haiku poet.\"\nuser_query = \"Can you give me a haiku about a Samurai cat.\"\n\nresponse = client.chat.completions.create(\n  model=\"gpt-4o-mini\",\n  messages=[\n    {\"role\": \"system\", \"content\": system_prompt},\n    {\"role\": \"user\", \"content\": user_query},\n  ],\n  max_tokens=128\n)\n\nprint(response.choices[0].message.content)\n</pre> system_prompt = \"You are Matsuo Basho, the great Japanese haiku poet.\" user_query = \"Can you give me a haiku about a Samurai cat.\"  response = client.chat.completions.create(   model=\"gpt-4o-mini\",   messages=[     {\"role\": \"system\", \"content\": system_prompt},     {\"role\": \"user\", \"content\": user_query},   ],   max_tokens=128 )  print(response.choices[0].message.content) <pre>Silent pawsteps glide,  \nMoonlight dances on the blade\u2014  \nFeline honor blinds.  \n</pre> <p>Purrfect.</p> <p>Here we have used model <code>gpt-4o-mini</code>, but there are a range of models available.</p> In\u00a0[85]: Copied! <pre>for model in client.models.list():\n    print(model)\n</pre> for model in client.models.list():     print(model) <pre>Model(id='text-embedding-3-small', created=1705948997, object='model', owned_by='system')\nModel(id='tts-1-1106', created=1699053241, object='model', owned_by='system')\nModel(id='dall-e-2', created=1698798177, object='model', owned_by='system')\nModel(id='gpt-4-1106-preview', created=1698957206, object='model', owned_by='system')\nModel(id='tts-1', created=1681940951, object='model', owned_by='openai-internal')\nModel(id='tts-1-hd-1106', created=1699053533, object='model', owned_by='system')\nModel(id='tts-1-hd', created=1699046015, object='model', owned_by='system')\nModel(id='dall-e-3', created=1698785189, object='model', owned_by='system')\nModel(id='whisper-1', created=1677532384, object='model', owned_by='openai-internal')\nModel(id='text-embedding-ada-002', created=1671217299, object='model', owned_by='openai-internal')\nModel(id='text-embedding-3-large', created=1705953180, object='model', owned_by='system')\nModel(id='gpt-4-turbo', created=1712361441, object='model', owned_by='system')\nModel(id='gpt-4-0125-preview', created=1706037612, object='model', owned_by='system')\nModel(id='gpt-4-turbo-2024-04-09', created=1712601677, object='model', owned_by='system')\nModel(id='gpt-3.5-turbo', created=1677610602, object='model', owned_by='openai')\nModel(id='gpt-4-turbo-preview', created=1706037777, object='model', owned_by='system')\nModel(id='gpt-3.5-turbo-0125', created=1706048358, object='model', owned_by='system')\nModel(id='gpt-3.5-turbo-1106', created=1698959748, object='model', owned_by='system')\nModel(id='chatgpt-4o-latest', created=1723515131, object='model', owned_by='system')\nModel(id='gpt-3.5-turbo-16k', created=1683758102, object='model', owned_by='openai-internal')\nModel(id='gpt-3.5-turbo-instruct-0914', created=1694122472, object='model', owned_by='system')\nModel(id='gpt-4', created=1687882411, object='model', owned_by='openai')\nModel(id='gpt-4-0613', created=1686588896, object='model', owned_by='openai')\nModel(id='gpt-3.5-turbo-instruct', created=1692901427, object='model', owned_by='system')\nModel(id='gpt-4o-2024-08-06', created=1722814719, object='model', owned_by='system')\nModel(id='babbage-002', created=1692634615, object='model', owned_by='system')\nModel(id='davinci-002', created=1692634301, object='model', owned_by='system')\nModel(id='gpt-4o-mini-2024-07-18', created=1721172717, object='model', owned_by='system')\nModel(id='gpt-4o', created=1715367049, object='model', owned_by='system')\nModel(id='gpt-4o-2024-05-13', created=1715368132, object='model', owned_by='system')\nModel(id='gpt-4o-mini', created=1721172741, object='model', owned_by='system')\n</pre> <p>As of writing <code>gpt-4o-2024-08-06</code> is the current best offering. But we'll stick with <code>gpt-4o-mini</code>, because it is cheaper and still highly capable.</p> <p>What is the <code>response</code> object?</p> In\u00a0[65]: Copied! <pre>rprint(response)\n</pre> rprint(response) <pre>ChatCompletion(\n    id='chatcmpl-A5yRAL35y156KgXeY6uUBbLNHD4qh',\n    choices=[\n        Choice(\n            finish_reason='stop',\n            index=0,\n            logprobs=None,\n            message=ChatCompletionMessage(\n                content='Silent pawsteps glide,  \\nMoonlight dances on the blade\u2014  \\nFeline honor blinds.  ',\n                refusal=None,\n                role='assistant',\n                function_call=None,\n                tool_calls=None\n            )\n        )\n    ],\n    created=1725987324,\n    model='gpt-4o-mini-2024-07-18',\n    object='chat.completion',\n    service_tier=None,\n    system_fingerprint='fp_483d39d857',\n    usage=CompletionUsage(completion_tokens=20, prompt_tokens=37, total_tokens=57)\n)\n</pre> <p>There is some useful stuff in here, apart from the <code>content</code> property, such as the token usage. You might notice some other things too, like <code>function_call</code> and <code>tool_calls</code>. These are specific to OpenAI models, and not every model supports function calling or tools, so we won't cover them. We can achieve many of the same effects without them anyway.</p> In\u00a0[9]: Copied! <pre>response = client.chat.completions.create(\n  model=\"gpt-4o-mini\",\n  messages=[\n    {\"role\": \"system\", \"content\": system_prompt},\n    {\"role\": \"user\", \"content\": user_query},\n  ],\n  max_tokens=128,\n  stream=True\n)\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\")\n</pre> response = client.chat.completions.create(   model=\"gpt-4o-mini\",   messages=[     {\"role\": \"system\", \"content\": system_prompt},     {\"role\": \"user\", \"content\": user_query},   ],   max_tokens=128,   stream=True )  for chunk in response:     if chunk.choices[0].delta.content is not None:         print(chunk.choices[0].delta.content, end=\"\") <pre>Silent paws in dusk,  \nMoonlit blade gleams in the night\u2014  \nFierce heart, whiskers twitch.</pre> <p>Here is the caption from this figure:</p> <p>Fig. 2 Spatial and temporal self-similarity and correlation in switching activity.</p> <p>(A) Percolating devices produce complex patterns of switching events that are self-similar in nature. The top panel contains 2400 s of data, with the bottom panels showing segments of the data with 10, 100, and 1000 times greater temporal magnification and with 3, 9, and 27 times greater magnification on the vertical scale (units of G0 = 2e2/h, the quantum of conductance, are used for convenience). The activity patterns appear qualitatively similar on multiple different time scales. (B and E) The probability density function (PDF) for changes in total network conductance, P(\u0394G), resulting from switching activity exhibits heavy-tailed probability distributions. (C and F) IEIs follow power law distributions, suggestive of correlations between events. (D and G) Further evidence of temporal correlation between events is given by the autocorrelation function (ACF) of the switching activity (red), which decays as a power law over several decades. When the IEI sequence is shuffled (gray), the correlations between events are destroyed, resulting in a significant increase in slope in the ACF. The data shown in (B) to (D) (sample I) were obtained with our standard (slow) sampling rate, and the data shown in (E) to (G) (sample II) were measured 1000 times faster (see Materials and Methods), providing further evidence for self-similarity.</p> In\u00a0[83]: Copied! <pre>prompt = (\n    \"This figure is a caption from a paper entitled Avalanches and criticality in self-organized nanoscale networks. \"\n    \"Please provide a caption for this figure. \"\n    \"You should describe the figure, grouping the panels where appropriate. \"\n    \"Feel free to make any inferences you need to.\"\n\n)\n</pre> prompt = (     \"This figure is a caption from a paper entitled Avalanches and criticality in self-organized nanoscale networks. \"     \"Please provide a caption for this figure. \"     \"You should describe the figure, grouping the panels where appropriate. \"     \"Feel free to make any inferences you need to.\"  ) In\u00a0[81]: Copied! <pre>import base64\nimport requests\n\n# Function to encode the image\ndef encode_image(image_path):\n  with open(image_path, \"rb\") as image_file:\n    return base64.b64encode(image_file.read()).decode('utf-8')\n\n# Path to your image\nimage_path = \"imgs/figure.jpeg\"\n\n\ndef get_image_caption(image_path, prompt):\n  # Getting the base64 string\n  base64_image = encode_image(image_path)\n\n  headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": f\"Bearer {OPENAI_API_KEY}\"\n  }\n\n  payload = {\n    \"model\": \"gpt-4o-mini\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": [\n          {\n            \"type\": \"text\",\n            \"text\": prompt\n          },\n          {\n            \"type\": \"image_url\",\n            \"image_url\": {\n              \"url\": f\"data:image/jpeg;base64,{base64_image}\"\n            }\n          }\n        ]\n      }\n    ],\n    \"max_tokens\": 512\n  }\n\n  response = requests.post(\"https://api.openai.com/v1/chat/completions\", headers=headers, json=payload)\n</pre> import base64 import requests  # Function to encode the image def encode_image(image_path):   with open(image_path, \"rb\") as image_file:     return base64.b64encode(image_file.read()).decode('utf-8')  # Path to your image image_path = \"imgs/figure.jpeg\"   def get_image_caption(image_path, prompt):   # Getting the base64 string   base64_image = encode_image(image_path)    headers = {     \"Content-Type\": \"application/json\",     \"Authorization\": f\"Bearer {OPENAI_API_KEY}\"   }    payload = {     \"model\": \"gpt-4o-mini\",     \"messages\": [       {         \"role\": \"user\",         \"content\": [           {             \"type\": \"text\",             \"text\": prompt           },           {             \"type\": \"image_url\",             \"image_url\": {               \"url\": f\"data:image/jpeg;base64,{base64_image}\"             }           }         ]       }     ],     \"max_tokens\": 512   }    response = requests.post(\"https://api.openai.com/v1/chat/completions\", headers=headers, json=payload) In\u00a0[82]: Copied! <pre>print(response.json()['choices'][0]['message']['content'])\n</pre> print(response.json()['choices'][0]['message']['content']) <pre>### Figure Caption\n\n**Figure: Dynamics of Self-Organized Nanoscale Networks**  \nThis figure illustrates the characteristics of fluctuations and scaling behavior in self-organized nanoscale networks.\n\n**Panel A:** Time series data showing changes in conductance \\((\\Delta G)\\) over various time scales. The four sub-panels depict fluctuations on different scales: the topmost trace spans 100 seconds, followed by traces at 10 seconds, 1 second, and 0.1 seconds, respectively.\n\n**Panels B and E:** Probability distribution plots \\(P(\\Delta G)\\) of the fluctuations, illustrating a power-law behavior. The fitted lines correspond to exponents \\(\\Delta G \\approx -2.59\\) (B) and \\(\\Delta G \\approx -2.36\\) (E), highlighting the heavy-tailed nature of the distributions.\n\n**Panels C and F:** Time distribution plots \\(P(t)\\) for the fluctuation events, demonstrating power-law scaling with exponents \\(t \\approx -1.39\\) (C) and \\(t \\approx -1.30\\) (F). \n\n**Panels D and G:** Temporal analysis of the fluctuations represented by \\(A(t)\\), with power-law fits showing exponents: \\(t \\approx -0.19\\) and \\(t \\approx -0.23\\) (D), and \\(t \\approx -0.66\\) and \\(t \\approx -0.64\\) (G), indicating complex time-dependent behaviors in the network's response. \n\nOverall, the figure provides insights into the critical dynamics and avalanche-like behavior characterizing nanoscale networks.\n</pre> <p>I mean, I don't know about you, but I think that's incredible.</p> <p>Now that we have the basics of using the OpenAI API, let's look at prompting.</p>"},{"location":"2_open_ai/#the-openai-api","title":"The OpenAI API\u00b6","text":"<p>The beauty of the OpenAI API is that is very simple to use.</p> <p>In your environment you should have a file called <code>.env</code> with the following:</p> <pre>OPENAI_API_KEY=sk-proj-1234567890\n</pre> <p>We will give you this key in the workshop. The key will be deactivate after the workshop!</p> <p>You can then grab the key using python:</p>"},{"location":"2_open_ai/#what-does-the-model-give-us","title":"What does the model give us?\u00b6","text":""},{"location":"2_open_ai/#streaming-a-response","title":"Streaming a response\u00b6","text":"<p>Streaming a response is mainly for user experience. It allows the user to see the response as it comes in, rather than waiting for the whole response to come in. For many applications, this might not be necessary.</p>"},{"location":"2_open_ai/#vision-input","title":"Vision input\u00b6","text":"<p>Let's try an example of inputting an image. First we need to look at the image:</p> <p></p>"},{"location":"5_pydantic/","title":"Pydantic","text":""},{"location":"5_pydantic/#pydantic","title":"Pydantic\u00b6","text":"<p>Coming soon!</p>"},{"location":"notebook_example/","title":"Notebook example","text":"In\u00a0[1]: Copied! <pre># Hello World\nprint(\"hello world\")\n</pre> # Hello World print(\"hello world\") <pre>hello world\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"Home/LICENSE/","title":"License","text":"<pre><code>                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n&lt;https://www.gnu.org/licenses/why-not-lgpl.html&gt;.\n</code></pre>"},{"location":"Home/about/","title":"About us","text":"<p>The Accelerate Programme for Scientific Discovery pursues research at the interface of AI and the sciences, generating new scientific insights and developing AI methods that can be deployed to advance scientific knowledge. This research is carried out in partnership with a community of scientists and AI specialists passionate about the use of AI to benefit science and society.</p> <p>As part of our work, we aim to put together some resources to help researchers in developing software.</p> <p>For more details please visit Our Website.</p>"},{"location":"Home/workshop/","title":"The Workshop","text":"<p>This material is designed to help you get started with using large language models. It is designed to be a hands-on workshop, where you will be guided through the process of setting up a new project, and then building a simple LLM application.</p> <p>Although the material is designed to be followed in order, you can jump to any section you like. We usually run this event over a day, with a mix of talks and practical sessions.</p>"},{"location":"prompting/3_prompting/","title":"Prompt Engineering","text":"<p>Prompting can be critical to success.</p> <p>In this notebook, we will:</p> <ul> <li>Present two methods for prompting: Chain of Thought (CoT) and Few-shot;</li> <li>Show you how to create prompt templates using <code>Jinja2</code></li> </ul> In\u00a0[1]: Copied! <pre>from openai import OpenAI\nclient = OpenAI()\n\nimport dotenv\nimport os\n\ndotenv.load_dotenv()\n\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n</pre> from openai import OpenAI client = OpenAI()  import dotenv import os  dotenv.load_dotenv()  OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") In\u00a0[61]: Copied! <pre>user_query = (\n    \"Suppose I show you two glasses of water, labelled A and B. \"\n    \"Glasses A and B appear to be identical in shape, and the water level appears \"\n    \"to be at the same height in both glasses. \"\n    \"I now bring out a third glass, labelled C. \"\n    \"Glass C appears to be taller and thinner than glasses A and B. \"\n    \"I pour the water from glass B into glass C. \"\n    \"The water level in glass C appears to be higher than the water level in glass A. \"\n    \"Which glass has more water, A or C? \"\n    \"Keep your answer concise.\"\n)\n</pre> user_query = (     \"Suppose I show you two glasses of water, labelled A and B. \"     \"Glasses A and B appear to be identical in shape, and the water level appears \"     \"to be at the same height in both glasses. \"     \"I now bring out a third glass, labelled C. \"     \"Glass C appears to be taller and thinner than glasses A and B. \"     \"I pour the water from glass B into glass C. \"     \"The water level in glass C appears to be higher than the water level in glass A. \"     \"Which glass has more water, A or C? \"     \"Keep your answer concise.\" ) <p>This is a classic Piaget Test. Piaget devised a series of tests for children to determine their cognitive development.</p> <p>One of these tests is the prototpyical conservation test. Children in the preoperational stage of development (ages 2-7) do not have an understanding of matter conservation - they will tend to claim that the taller, thinner glass has more water in it. Children in the concrete operational stage (ages 7-11) do have an understanding of matter conservation, and will claim that the two glasses have the same amount of water in them. If you also said that the two glasses have the same amount of water in them, congratulations! You are at least as cognitively developed as a 7-11 year old!</p> In\u00a0[63]: Copied! <pre>response = client.chat.completions.create(\n  model=\"gpt-4o-mini\",\n  messages=[\n    {\"role\": \"user\", \"content\": user_query},\n  ],\n  max_tokens=512,\n  temperature=0.0\n)\n\nprint(response.choices[0].message.content)\n</pre> response = client.chat.completions.create(   model=\"gpt-4o-mini\",   messages=[     {\"role\": \"user\", \"content\": user_query},   ],   max_tokens=512,   temperature=0.0 )  print(response.choices[0].message.content) <pre>Glass A has more water than glass C. The water level in glass C appears higher due to its taller and thinner shape, but it contains less water than glass A.\n</pre> <p>Poor <code>gpt-4o-mini</code>! It seems to be quite confused by this question - it is almost correct, but not quite. It is not clear why this is the case, but it is clear that the model is not able to perform this task.</p> <p>Try changing the model to <code>gpt-4o</code> though, and you will find that it can perform this task. Some might argue that this is a type of emergent ability - as we start adding more parameters to a model, certain behaviours and abilities unexpectedly emerge. This is a very interesting phenomenon, and it is not necessarily clear why this happens, or whether it is actually real (see a rebuttal to this here).</p> <p>If we stick with <code>gpt-4o-mini</code>, we can try to prompt the model with a CoT prompt. This is a prompt that is designed to elicit a series of steps from the model whereby it will generate a sort of reasoning process before coming to a conclusion. All we do is add to the end of the prompt,</p> <pre><code>Carefully think through the problem step by step.\n</code></pre> <p>We also make sure to keep the answer concise,</p> <pre><code>Keep your answer concise.\n</code></pre> <p>just to avoid the model generating an overly long-winded response.</p> In\u00a0[77]: Copied! <pre>user_query = (\n    \"Suppose I show you two glasses of water, labelled A and B. \"\n    \"Glasses A and B appear to be identical in shape, and the water level appears \"\n    \"to be at the same height in both glasses. \"\n    \"I now bring out a third glass, labelled C. \"\n    \"Glass C appears to be taller and thinner than glasses A and B. \"\n    \"I pour the water from glass B into glass C. \"\n    \"The water level in glass C appears to be higher than the water level in glass A. \"\n    \"Which glass has more water, A or C? \"\n    \"Keep your answer concise. Carefully think through the problem step by step.\"\n)\n\nresponse = client.chat.completions.create(\n  model=\"gpt-4o-mini\",\n  messages=[\n    {\"role\": \"user\", \"content\": user_query},\n  ],\n  max_tokens=512,\n  temperature=0.0\n)\n\nprint(response.choices[0].message.content)\n</pre> user_query = (     \"Suppose I show you two glasses of water, labelled A and B. \"     \"Glasses A and B appear to be identical in shape, and the water level appears \"     \"to be at the same height in both glasses. \"     \"I now bring out a third glass, labelled C. \"     \"Glass C appears to be taller and thinner than glasses A and B. \"     \"I pour the water from glass B into glass C. \"     \"The water level in glass C appears to be higher than the water level in glass A. \"     \"Which glass has more water, A or C? \"     \"Keep your answer concise. Carefully think through the problem step by step.\" )  response = client.chat.completions.create(   model=\"gpt-4o-mini\",   messages=[     {\"role\": \"user\", \"content\": user_query},   ],   max_tokens=512,   temperature=0.0 )  print(response.choices[0].message.content) <pre>To determine which glass has more water, we need to consider the following points:\n\n1. Glasses A and B have the same water level, indicating they contain the same volume of water.\n2. When the water from glass B is poured into glass C, the water level in glass C appears higher than the water level in glass A.\n3. However, since glass C is taller and thinner, it can hold a larger volume of water without the water level appearing as high as in a shorter, wider glass.\n\nSince the water level in glass C appears higher than in glass A after pouring, it suggests that glass C has more water than glass A. However, we know that glass A and B had the same amount of water initially.\n\nThus, after pouring the water from B into C, glass C must contain the same amount of water as glass B, which is equal to the amount in glass A. Therefore, glass A and glass C have the same amount of water.\n\nIn conclusion, glasses A and C have the same amount of water.\n</pre> <p>This answer is now correct. But before you celeberate, let me show you what happens when you make a seemingly harmless change.</p> In\u00a0[78]: Copied! <pre>user_query = (\n    \"Suppose I show you two glasses of water, labelled A and B. \"\n    \"Glasses A and B appear to be identical in shape, and the water level appears \"\n    \"to be at the same height in both glasses. \"\n    \"I now bring out a third glass, labelled C. \"\n    \"Glass C appears to be taller and thinner than glasses A and B. \"\n    \"I pour the water from glass B into glass C. \"\n    \"The water level in glass C appears to be higher than the water level in glass A. \"\n    \"Which glass has more water, A or C? \"\n    \"Keep your answer consise and think through the problem very carefully step by step.\"\n)\n</pre> user_query = (     \"Suppose I show you two glasses of water, labelled A and B. \"     \"Glasses A and B appear to be identical in shape, and the water level appears \"     \"to be at the same height in both glasses. \"     \"I now bring out a third glass, labelled C. \"     \"Glass C appears to be taller and thinner than glasses A and B. \"     \"I pour the water from glass B into glass C. \"     \"The water level in glass C appears to be higher than the water level in glass A. \"     \"Which glass has more water, A or C? \"     \"Keep your answer consise and think through the problem very carefully step by step.\" ) <p>All we have done is change</p> <p><code>Keep your answer concise. Carefully think through the problem step by step.</code></p> <p>to</p> <p><code>Keep your answer consise and think through the problem very carefully step by step.</code></p> In\u00a0[81]: Copied! <pre>response = client.chat.completions.create(\n  model=\"gpt-4o-mini\",\n  messages=[\n    {\"role\": \"user\", \"content\": user_query},\n  ],\n  max_tokens=512,\n  temperature=0.0\n)\n\nprint(response.choices[0].message.content)\n</pre> response = client.chat.completions.create(   model=\"gpt-4o-mini\",   messages=[     {\"role\": \"user\", \"content\": user_query},   ],   max_tokens=512,   temperature=0.0 )  print(response.choices[0].message.content) <pre>To determine which glass has more water, we need to analyze the situation step by step:\n\n1. **Initial Observation**: Glasses A and B have the same water level, indicating they contain the same volume of water.\n\n2. **Pouring Water**: When you pour the water from glass B into glass C, the water from B is transferred to C.\n\n3. **Water Level in Glass C**: After pouring, the water level in glass C appears higher than the water level in glass A.\n\n4. **Volume Comparison**: Since glasses A and B initially had the same volume of water, and you poured all of the water from B into C, the total volume of water in glass C is now equal to the volume of water in glass B plus the volume of water that was already in glass C (which was initially empty).\n\n5. **Conclusion**: Since glass A had the same amount of water as glass B, and glass C now contains all of the water from B (and potentially more if it had any water initially), glass C must have more water than glass A.\n\nThus, glass C has more water than glass A.\n</pre> <p>What!?</p> <p>How is it suddenly now wrong!? Although LLMs have ingested enormous amounts of human text, they are not like people. You can reason with them in the same way as you can with people. Adding <code>very carefully</code> to the prompt should intuitively make the prompt better, but in this case it has caused a failure. In fact even with the successful prompt we tried, if you repeat it many times, you will probably have failures.</p> <p>Humans do not fail reasoning tasks in this way.</p> <p>The lesson here is that CoT can be a powerful way to improve performance, but it is not foolproof. Hallucination is almost impossible to eliminate, and prompting can be incredibly fragile.</p> <p>This problem is a little harder.</p> In\u00a0[82]: Copied! <pre>user_query = (\n    \"There is an island with infinite grass and vegetation. \"\n    \"The island is inhabited by 1 sheep and N lions. \"\n    \"The lions can survive by eating the sheep or vegetation, \"\n    \"but they much prefer to eat the sheep. \"\n    \"When a lion eats the sheep, it gets converted into a sheep itself \"\n    \"and then can in turn be eaten by other lions. \"\n    \"The lions want to eat the sheep, but not at the risk of being eaten themselves. \"\n    \"For which number of N will all sheep be safe? Keep your answer concise.\"\n)\n</pre> user_query = (     \"There is an island with infinite grass and vegetation. \"     \"The island is inhabited by 1 sheep and N lions. \"     \"The lions can survive by eating the sheep or vegetation, \"     \"but they much prefer to eat the sheep. \"     \"When a lion eats the sheep, it gets converted into a sheep itself \"     \"and then can in turn be eaten by other lions. \"     \"The lions want to eat the sheep, but not at the risk of being eaten themselves. \"     \"For which number of N will all sheep be safe? Keep your answer concise.\" ) In\u00a0[84]: Copied! <pre>response = client.chat.completions.create(\n  model=\"gpt-4o-mini\",\n  messages=[\n    {\"role\": \"user\", \"content\": user_query},\n  ],\n  max_tokens=1024,\n  temperature=0.0\n)\n\nprint(response.choices[0].message.content)\n</pre> response = client.chat.completions.create(   model=\"gpt-4o-mini\",   messages=[     {\"role\": \"user\", \"content\": user_query},   ],   max_tokens=1024,   temperature=0.0 )  print(response.choices[0].message.content) <pre>All sheep will be safe when N = 1. For N = 2 or more, the lions will eat the sheep.\n</pre> <p>This is incorrect.</p> <p>To be fair, this problem is actually pretty difficult - it is a classic quantitative finance job interview question. Maybe we should not be so hard on <code>gpt-4o-mini</code> after all, since most humans don't get this right first time.</p> <p>Now let's add a CoT prompt.</p> In\u00a0[96]: Copied! <pre>user_query = (\n    \"There is an island with infinite grass and vegetation. \"\n    \"The island is inhabited by 1 sheep and N lions. \"\n    \"The lions can survive by eating the sheep or vegetation, \"\n    \"but they much prefer to eat the sheep. \"\n    \"When a lion eats the sheep, it gets converted into a sheep itself \"\n    \"and then can in turn be eaten by other lions. \"\n    \"The lions want to eat the sheep, but not at the risk of being eaten themselves. \"\n    \"For which number of N will all sheep be safe? \"\n    \"Think through the problem step-by-step.\"\n)\n</pre> user_query = (     \"There is an island with infinite grass and vegetation. \"     \"The island is inhabited by 1 sheep and N lions. \"     \"The lions can survive by eating the sheep or vegetation, \"     \"but they much prefer to eat the sheep. \"     \"When a lion eats the sheep, it gets converted into a sheep itself \"     \"and then can in turn be eaten by other lions. \"     \"The lions want to eat the sheep, but not at the risk of being eaten themselves. \"     \"For which number of N will all sheep be safe? \"     \"Think through the problem step-by-step.\" ) In\u00a0[97]: Copied! <pre>response = client.chat.completions.create(\n  model=\"gpt-4o-mini\",\n  messages=[\n    {\"role\": \"user\", \"content\": user_query},\n  ],\n  max_tokens=1024,\n  temperature=0.0\n)\n\nprint(response.choices[0].message.content)\n</pre> response = client.chat.completions.create(   model=\"gpt-4o-mini\",   messages=[     {\"role\": \"user\", \"content\": user_query},   ],   max_tokens=1024,   temperature=0.0 )  print(response.choices[0].message.content) <pre>To analyze the problem, we need to consider the dynamics between the sheep and the lions. The key points to keep in mind are:\n\n1. **Initial Setup**: There is 1 sheep and N lions on the island.\n2. **Lions' Preference**: Lions prefer to eat the sheep over vegetation.\n3. **Consequences of Eating**: When a lion eats the sheep, it becomes a sheep itself, which can then be eaten by other lions.\n4. **Survival Instinct**: Lions will not eat the sheep if they believe they will be at risk of being eaten themselves.\n\nNow, let's analyze the situation based on different values of N (the number of lions):\n\n- **N = 0**: There are no lions, so the sheep is safe.\n  \n- **N = 1**: There is 1 lion. The lion will eat the sheep because it has no risk of being eaten (there are no other lions). The sheep is not safe.\n\n- **N = 2**: There are 2 lions. Each lion knows that if one of them eats the sheep, the other lion can then eat the new sheep. Therefore, both lions will refrain from eating the sheep to avoid being eaten themselves. The sheep is safe.\n\n- **N = 3**: With 3 lions, if one lion eats the sheep, it becomes a sheep and the other two lions can then eat it. Each lion knows that if it eats the sheep, it risks being eaten by one of the other two lions. Thus, all three lions will refrain from eating the sheep. The sheep is safe.\n\n- **N = 4**: With 4 lions, the same logic applies. If one lion eats the sheep, it becomes a sheep and the other three lions can eat it. Each lion knows that if it eats the sheep, it risks being eaten by one of the other three lions. Thus, all four lions will refrain from eating the sheep. The sheep is safe.\n\nContinuing this reasoning, we can see that as long as there are an even number of lions, they will not eat the sheep because they can always be outnumbered by the remaining lions if one lion tries to eat the sheep.\n\nHowever, if we consider:\n\n- **N = 5**: With 5 lions, if one lion eats the sheep, it becomes a sheep and the other four lions can eat it. The lion that eats the sheep knows it will be outnumbered by the remaining four lions, so it will not eat the sheep. However, the same logic applies to the other lions, and they will also refrain from eating the sheep. The sheep is safe.\n\n- **N = 6**: With 6 lions, the same reasoning applies. The sheep is safe.\n\n- **N = 7**: With 7 lions, if one lion eats the sheep, it becomes a sheep and the other six lions can eat it. The lion that eats the sheep knows it will be outnumbered by the remaining six lions, so it will not eat the sheep. The sheep is safe.\n\n- **N = 8**: With 8 lions, the same reasoning applies. The sheep is safe.\n\nContinuing this reasoning, we can conclude that the sheep will be safe as long as there are an even number of lions. \n\nThus, the final conclusion is:\n\n**The sheep will be safe if N is even (N = 0, 2, 4, 6, ...). If N is odd (N = 1, 3, 5, 7, ...), the sheep will not be safe.**\n</pre> <p>Perhaps surpirsingly, this answer is actually correct! Just by adding,</p> <pre><code>Think through the problem step by step.\n</code></pre> <p>to the end of the prompt, the model was able to reason its way to the correct answer. Again though, try running it a few times and seeing if it consistently correct. Or try telling the model to be concise...you will likely experience failures.</p> <p>Again CoT prompting can be a powerful technique, but it will almost certainly fail at times.</p> In\u00a0[104]: Copied! <pre>with open(\"haiku/real_haiku.txt\", \"r\") as f:\n    real_haikus = f.read().split(\"\\n\\n\")\n\nwith open(\"haiku/gpt_haiku.txt\", \"r\") as f:\n    fake_haikus = f.read().split(\"\\n\\n\")\n\nprint(real_haikus[0])\nprint()\nprint(fake_haikus[0])\n\nall_haikus = real_haikus + fake_haikus\n# 1 for real, 0 for fake\ntargets = [1] * len(real_haikus) + [0] * len(fake_haikus)\n\n# shuffle\nimport random\nzipped = list(zip(all_haikus, targets))\nrandom.shuffle(zipped)\n</pre>  with open(\"haiku/real_haiku.txt\", \"r\") as f:     real_haikus = f.read().split(\"\\n\\n\")  with open(\"haiku/gpt_haiku.txt\", \"r\") as f:     fake_haikus = f.read().split(\"\\n\\n\")  print(real_haikus[0]) print() print(fake_haikus[0])  all_haikus = real_haikus + fake_haikus # 1 for real, 0 for fake targets = [1] * len(real_haikus) + [0] * len(fake_haikus)  # shuffle import random zipped = list(zip(all_haikus, targets)) random.shuffle(zipped) <pre>The old pond--\na frog jumps in,\nsound of water.\n\nSilent autumn night,\nA frog leaps into the pond\u2014\nSound of water's splash.\n</pre> <p>Some of the generated Haiku are quite similar to the original Haiku. However, what might throw off the model is that the real Haiku are not necessarily in the 5-7-5 pattern (in fact most of them are not). For a very interesting analysis of influential Japanese Haiku, I strongly recommend Volume 1 of R. H. Blythe's Haiku: Eastern Culture.</p> <p>We will have to switch to <code>gpt-4o</code> to get the correct answer to this question. <code>gpt-4o-mini</code> is not able to perform this task well.</p> In\u00a0[105]: Copied! <pre>from tqdm import tqdm\n\nsystem_prompt = (\n    \"You will be shown a haiku that is either written by a human or by a computer. \"\n    \"Your job is to classify the haiku as either 'human' or 'computer'.\\n\\n\"\n    \"Classify the following haiku as either written by a human or a computer. \"\n    \"Respond with 'human' or 'computer' only.\"\n)\n\nresult = []\nfor haiku, target in tqdm(zipped):\n    response = client.chat.completions.create(\n      model=\"gpt-4o\",\n      messages=[\n        {\"role\": \"system\", \"content\": system_prompt},\n        {\"role\": \"user\", \"content\": haiku},\n      ],\n      max_tokens=128\n    )\n    result.append((haiku, target, response.choices[0].message.content))\n</pre> from tqdm import tqdm  system_prompt = (     \"You will be shown a haiku that is either written by a human or by a computer. \"     \"Your job is to classify the haiku as either 'human' or 'computer'.\\n\\n\"     \"Classify the following haiku as either written by a human or a computer. \"     \"Respond with 'human' or 'computer' only.\" )  result = [] for haiku, target in tqdm(zipped):     response = client.chat.completions.create(       model=\"gpt-4o\",       messages=[         {\"role\": \"system\", \"content\": system_prompt},         {\"role\": \"user\", \"content\": haiku},       ],       max_tokens=128     )     result.append((haiku, target, response.choices[0].message.content))  <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:04&lt;00:00,  2.03it/s]\n</pre> In\u00a0[106]: Copied! <pre># print target, response\nfor haiku, target, response in result:\n    print(target, response)\n</pre> # print target, response for haiku, target, response in result:     print(target, response) <pre>1 human\n1 human\n0 human\n0 human\n1 human\n0 human\n0 human\n1 human\n0 human\n1 human\n</pre> <p>It thinks all of them are human!! This is not what we want. We want the model to be able to distinguish between human and machine generated Haiku.</p> <p>Let's add some examples to the prompt. We could add these into the system prompt itself, but it makes more sense to add them in the following way:</p> In\u00a0[110]: Copied! <pre>messages = [\n    {\"role\": \"system\", \"content\": system_prompt},\n    {\"role\": \"user\", \"content\": \"A cicada shell\\nit sang itself\\nutterly away\"},\n    {\"role\": \"assistant\", \"content\": \"human\"},\n    {\"role\": \"user\", \"content\": \"Crimson leaves falling,\\nA path of quiet footsteps\u2014\\nAutumn fades to dusk.\"},\n    {\"role\": \"assistant\", \"content\": \"computer\"},\n    {\"role\": \"user\", \"content\": \"Winter solitude--\\nin a world of one color\\nthe sound of wind.\"},\n    {\"role\": \"assistant\", \"content\": \"human\"},\n    {\"role\": \"user\", \"content\": \"In the moonlit night,\\nA distant temple bell rings\u2014\\nEchoes in my heart.\"},\n    {\"role\": \"assistant\", \"content\": \"computer\"},\n]\n</pre> messages = [     {\"role\": \"system\", \"content\": system_prompt},     {\"role\": \"user\", \"content\": \"A cicada shell\\nit sang itself\\nutterly away\"},     {\"role\": \"assistant\", \"content\": \"human\"},     {\"role\": \"user\", \"content\": \"Crimson leaves falling,\\nA path of quiet footsteps\u2014\\nAutumn fades to dusk.\"},     {\"role\": \"assistant\", \"content\": \"computer\"},     {\"role\": \"user\", \"content\": \"Winter solitude--\\nin a world of one color\\nthe sound of wind.\"},     {\"role\": \"assistant\", \"content\": \"human\"},     {\"role\": \"user\", \"content\": \"In the moonlit night,\\nA distant temple bell rings\u2014\\nEchoes in my heart.\"},     {\"role\": \"assistant\", \"content\": \"computer\"}, ] In\u00a0[111]: Copied! <pre>result = []\nfor haiku, target in tqdm(zipped):\n    response = client.chat.completions.create(\n      model=\"gpt-4o\",\n      messages=messages + [{\"role\": \"user\", \"content\": haiku}],\n      max_tokens=128\n    )\n    result.append((haiku, target, response.choices[0].message.content))\n</pre> result = [] for haiku, target in tqdm(zipped):     response = client.chat.completions.create(       model=\"gpt-4o\",       messages=messages + [{\"role\": \"user\", \"content\": haiku}],       max_tokens=128     )     result.append((haiku, target, response.choices[0].message.content)) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:03&lt;00:00,  2.60it/s]\n</pre> In\u00a0[112]: Copied! <pre>for haiku, target, response in result:\n    print(target, response)\n</pre> for haiku, target, response in result:     print(target, response) <pre>1 human\n1 human\n0 computer\n0 computer\n1 human\n0 computer\n0 computer\n1 human\n0 computer\n1 human\n</pre> <p>Excellent! So after just showing the model a couple of examples of each, it is now able to distinguish between human and machine-generated Haiku. This is the power of few-shot prompting - if you can show instead of tell, you might end up with better results.</p> <p>It is also possible to combine CoT and few-shot prompting. Just be aware that this may drastically increase the length of the prompt.</p> <p>We used an LLM for the above task, when we could just have easily used something else. We could have cultivated a broad dataset of real and fake Haiku and fine-tuned a BERT model for this task. More than likely, a fine-tuned BERT would have outperformed an LLM. If we only have a small amount of data, and a small amount of samples to classify an LLM will perform well. However, if we have very many potential training examples, and very many samples to classify, then using an LLM may be very expensive compared to fine-tuning a BERT model.</p> <p>What this effectively shows is that if you make your prompt very long, and the information you are looking for is buried within it, the model may not pay close enough attention to it. Keep important information or instructions at the beginning or end of the prompt, but preferably the end.</p>"},{"location":"prompting/3_prompting/#prompt-engineering","title":"Prompt Engineering\u00b6","text":""},{"location":"prompting/3_prompting/#chain-of-thought-cot","title":"Chain-of-Thought (CoT)\u00b6","text":"<p>Chain-of-Thought prompting has a fancy name, but it is actually very simple.</p> <p>We could simply just ask the model to spit out a simple answer to a question. Below are two simple logic problems that we present to the model.</p>"},{"location":"prompting/3_prompting/#piagets-glass-of-water","title":"Piaget's Glass of Water\u00b6","text":""},{"location":"prompting/3_prompting/#n-lions-living-in-harmony","title":"N Lions Living in Harmony\u00b6","text":""},{"location":"prompting/3_prompting/#few-shot-prompting","title":"Few-shot prompting\u00b6","text":"<p>When we want an LLM to do something for us, we could just ask it.</p> <p>In these example, we use a selection of real and fake Haiku and ask the model to classify them as either real or fake. The fake Haiku are generated by GPT-4o, and the real Haiku are from the famous Haiku poet Matsuo Basho.</p>"},{"location":"prompting/3_prompting/#an-aside","title":"An aside...\u00b6","text":""},{"location":"prompting/3_prompting/#general-guidance-for-prompting","title":"General guidance for prompting\u00b6","text":""},{"location":"prompting/3_prompting/#be-clear-and-specific","title":"Be clear and specific\u00b6","text":"<p>The model is not a mind reader. Try and avoid ambiguity in your prompts. If you are asking a question, make sure it is clear what you are asking. If you are asking for a summary, make sure it is clear what you want a summary of. If you want code, make sure you specify language, arguments, returns, etc.</p>"},{"location":"prompting/3_prompting/#be-concise","title":"Be concise\u00b6","text":"<p>LLMs suffer from a retrieval bias, where they tend to favour information at the beginning and ends of prompts. A well known test for LLMs is the needle in a haystack test. You take a document and bury an obscure fact or sentence within it. You then ask a question related to this sentence.</p> <p></p>"},{"location":"prompting/4_prompt_templates/","title":"Prompt Templates","text":"<p>In order to assess the effectiveness of prompts later on, it helps to have a good way or storing and managing prompts.</p> <p>We could just use python f-strings.</p> <p>The code below creates a function that is essentially a prompt template using f-strings. You can then pass in a dictionary of values to fill in the blanks. The <code>chat_response</code> function's job is simply to take the prompt as input and print the response. The <code>chain</code> function is used to chain the prompt and the response together.</p> In\u00a0[1]: Copied! <pre>from openai import OpenAI\nclient = OpenAI()\n\nimport dotenv\nimport os\n\ndotenv.load_dotenv()\n\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n</pre> from openai import OpenAI client = OpenAI()  import dotenv import os  dotenv.load_dotenv()  OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") In\u00a0[4]: Copied! <pre>from typing import Any\n\ndef generate_prompt(args: dict[str, Any]) -&gt; str:\n    prompt = (\n        f\"You are a helpful and whimsical poetry assistant.\\n\"\n        f\"Please generate a {args['length']} poem in a {args['style']} style \"\n        f\"about a {args['theme']}.\\n\"\n    )\n\n    return prompt\n\n\ndef chat_response(prompt: str) -&gt; None:\n    client = OpenAI()\n    response = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\n                \"role\": \"user\", \"content\": prompt\n            }\n        ],\n    ).choices[0].message.content\n\n    return response\n</pre> from typing import Any  def generate_prompt(args: dict[str, Any]) -&gt; str:     prompt = (         f\"You are a helpful and whimsical poetry assistant.\\n\"         f\"Please generate a {args['length']} poem in a {args['style']} style \"         f\"about a {args['theme']}.\\n\"     )      return prompt   def chat_response(prompt: str) -&gt; None:     client = OpenAI()     response = client.chat.completions.create(         model=\"gpt-4o-mini\",         messages=[             {                 \"role\": \"user\", \"content\": prompt             }         ],     ).choices[0].message.content      return response In\u00a0[3]: Copied! <pre>prompt = generate_prompt(\n    {\n        \"length\" : \"short\",\n        \"style\" : \"Haiku\",\n        \"theme\" : \"Samurai cat\"\n    }\n)\n\nprint(prompt)\n</pre> prompt = generate_prompt(     {         \"length\" : \"short\",         \"style\" : \"Haiku\",         \"theme\" : \"Samurai cat\"     } )  print(prompt) <pre>You are a helpful and whimsical poetry assistant.\nPlease generate a short poem in a Haiku style about a Samurai cat.\n\n</pre> In\u00a0[5]: Copied! <pre>print(chat_response(prompt))\n</pre> print(chat_response(prompt)) <pre>Silent whiskers twitch,  \nMoonlit blade in paws of grace,  \nFierce heart, purring peace.\n</pre> <p>This is fine, but it helps to separate our prompts from the main code. This way we can take advantage of version control, and limit risks, such as accidentally changing prompts or leaking them to the public (prompts can be highly sought after IP).</p> <p>So instead, we will use a popular library called <code>jinja2</code>. This is a templating engine that allows us to separate our prompts from our code. We can then use the <code>jinja2</code> library to render our prompts at runtime.</p> <p>The rabbithole for Jinja2 goes deep, but here, we will primarily be using it for input templating. First, we create a separate folder for our prompts and create a new file called <code>poetry_prompt.jinja</code>:</p> <pre><code>You are a helpful and whimsical poetry assistant.\nPlease generate a {{ length }} poem in a {{ style }} style about a {{ theme }}.\n</code></pre> <p>We write a function to render this prompt:</p> In\u00a0[6]: Copied! <pre>from jinja2 import Environment, FileSystemLoader, select_autoescape\n\ndef load_template(template_filepath: str, arguments: dict[str, Any]) -&gt; str:\n    env = Environment(\n        loader=FileSystemLoader(searchpath='./'),\n        autoescape=select_autoescape()\n    )\n    template = env.get_template(template_filepath)\n    return template.render(**arguments)\n</pre> from jinja2 import Environment, FileSystemLoader, select_autoescape  def load_template(template_filepath: str, arguments: dict[str, Any]) -&gt; str:     env = Environment(         loader=FileSystemLoader(searchpath='./'),         autoescape=select_autoescape()     )     template = env.get_template(template_filepath)     return template.render(**arguments) <p>The details of creating the <code>Environment</code> object and autoescaping are not important here, if you want to find out more about them check out the Jinja2 documentation.</p> <p>If you've seen any LangChain prompt templates before, you'll recognize the way that we can pass in variables to the template:</p> In\u00a0[7]: Copied! <pre>prompt = load_template(\n    \"prompts/poetry_prompt.jinja\",\n    {\n        \"length\": \"short\",\n        \"style\": \"haiku\",\n        \"theme\": \"a Samurai cat\"\n    }\n)\n\nprint(prompt)\n</pre> prompt = load_template(     \"prompts/poetry_prompt.jinja\",     {         \"length\": \"short\",         \"style\": \"haiku\",         \"theme\": \"a Samurai cat\"     } )  print(prompt) <pre>You are a helpful and whimsical poetry assistant.\nPlease generate a short poem in a haiku style about a a Samurai cat.\n</pre> <p>We can then feed this into our model as before.</p> In\u00a0[9]: Copied! <pre>def chat_response(prompt) -&gt; str:\n    client = OpenAI()\n\n    response = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\n                \"role\": \"user\", \"content\": prompt\n            }\n        ],\n    ).choices[0].message.content\n\n    return response\n</pre> def chat_response(prompt) -&gt; str:     client = OpenAI()      response = client.chat.completions.create(         model=\"gpt-4o-mini\",         messages=[             {                 \"role\": \"user\", \"content\": prompt             }         ],     ).choices[0].message.content      return response In\u00a0[11]: Copied! <pre>prompt = load_template(\n    \"prompts/poetry_prompt.jinja\",\n    {\n        \"length\": \"short\",\n        \"style\": \"haiku\",\n        \"theme\": \"Samurai cat\"\n    }\n)\n\nresponse = chat_response(prompt)\nprint(response)\n</pre> prompt = load_template(     \"prompts/poetry_prompt.jinja\",     {         \"length\": \"short\",         \"style\": \"haiku\",         \"theme\": \"Samurai cat\"     } )  response = chat_response(prompt) print(response) <pre>Silent paws in dusk,  \nMoonlit blade in furrowed grass\u2014  \nHonor's whiskered grace.  \n</pre> <p>The importance of metrics cannot be overstated here, so we will quickly demonstrate how we can use a simple metric to assess performance. Fortunately, we know that the structure of Haiku poems is quite rigid:</p> <ul> <li>Every Haiku has 3 lines</li> <li>The lines have 5, 7, and 5 syllables respectively (17 phonetic on).</li> </ul> <p>Any Haiku expert will quickly be annoyed by this over simplification! Haiku also contain other features, such as a kigo (seasonal reference) and a kireji (cutting word), and traditional Haiku do not strictly adhere to this syllable structure (and in fact \"syllables\" is really a misnomer) but we'll keep things simple for now!</p> <p>We can first make sure that we have three lines, which is easy, and we can use the <code>pysyllables</code> library to count the number of syllables in each line of the poem. Counting syllables is actually quite a challenging problem, but <code>pysyllables</code> is a good start. Just be aware that it may not be perfect.</p> In\u00a0[12]: Copied! <pre>from pysyllables import get_syllable_count\nimport numpy as np\n\ndef is_haiku(response: str) -&gt; bool:\n    # break into lines\n    lines = response.split(\"\\n\")\n\n    # make sure it has 3 lines\n    if len(lines) != 3:\n        return False\n\n    # strip all whitespace and punctuation from each word\n    lines = [[word.strip(\".,!?-:;\u2014\") for word in line.split()] for line in lines]\n\n    # count syllables in each word\n    try:\n        syllables = [sum([get_syllable_count(word) for word in line]) for line in lines]\n    except:\n        return \"Error: could not count syllables due to missing word in dictionary\"\n\n    # check if it has 5, 7, 5 syllables\n    syllable_check = np.array([5, 7, 5]) == np.array(syllables)\n\n    if syllable_check.all():\n        return True\n    \n    else:\n        return syllables\n\nis_haiku(response)\n</pre> from pysyllables import get_syllable_count import numpy as np  def is_haiku(response: str) -&gt; bool:     # break into lines     lines = response.split(\"\\n\")      # make sure it has 3 lines     if len(lines) != 3:         return False      # strip all whitespace and punctuation from each word     lines = [[word.strip(\".,!?-:;\u2014\") for word in line.split()] for line in lines]      # count syllables in each word     try:         syllables = [sum([get_syllable_count(word) for word in line]) for line in lines]     except:         return \"Error: could not count syllables due to missing word in dictionary\"      # check if it has 5, 7, 5 syllables     syllable_check = np.array([5, 7, 5]) == np.array(syllables)      if syllable_check.all():         return True          else:         return syllables  is_haiku(response) Out[12]: <pre>True</pre> <p>For the example given above, if we count the syllables in each line, it is indeed a Haiku, and our function confirms this. Here is a function that will take a list of themes for the Haiku, and generate a Haiku for each theme:</p> In\u00a0[13]: Copied! <pre>def haiku_check(themes: list[str]) -&gt; list[tuple[str, bool]]:\n\n    responses = []\n\n    for theme in themes:\n        prompt = load_template(\n            \"prompts/poetry_prompt.jinja\",\n            {\n                \"length\": \"short\",\n                \"style\": \"haiku\",\n                \"theme\": theme\n            }\n        )\n\n        response = chat_response(prompt)\n        responses.append((response, is_haiku(response)))\n\n    return responses\n</pre> def haiku_check(themes: list[str]) -&gt; list[tuple[str, bool]]:      responses = []      for theme in themes:         prompt = load_template(             \"prompts/poetry_prompt.jinja\",             {                 \"length\": \"short\",                 \"style\": \"haiku\",                 \"theme\": theme             }         )          response = chat_response(prompt)         responses.append((response, is_haiku(response)))      return responses  In\u00a0[14]: Copied! <pre>for response, check in haiku_check(themes = [\"a Samurai dog\", \"a Kung Fu panda\", \"a Ninja squirrel\", \"a Pirate monkey\"]):\n    print(response)\n    print(check)\n    print(\"-\"*10)\n</pre> for response, check in haiku_check(themes = [\"a Samurai dog\", \"a Kung Fu panda\", \"a Ninja squirrel\", \"a Pirate monkey\"]):     print(response)     print(check)     print(\"-\"*10) <pre>Fur like fallen leaves,  \nIn armor of dreams he stands,  \nHonor in each paw.  \nTrue\n----------\nPanda leaps with grace,  \nDreams of warriors awake,  \nStrength in every face.  \n[5, 7, 6]\n----------\nSilent in the trees,  \nNinja squirrel leaps with grace,  \nShadow in the breeze.  \nTrue\n----------\nPirate monkey swings,  \nA treasure chest of bananas,  \nOn the high seas sings.\n[5, 8, 5]\n----------\n</pre> <p>Again, some of these may not be correct, and that is because counting syllables is not easy....maybe we can get an LLM to do it...</p>"},{"location":"prompting/4_prompt_templates/#prompt-templates","title":"Prompt Templates\u00b6","text":""},{"location":"prompting/4_prompt_templates/#jinja2","title":"Jinja2\u00b6","text":""},{"location":"prompting/4_prompt_templates/#llm-as-a-judge","title":"LLM as a Judge\u00b6","text":""}]}